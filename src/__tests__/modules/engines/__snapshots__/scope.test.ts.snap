// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests if the generated memory map matches with the snapshot 1`] = `
Map {
  "defaultValue" => Object {
    "byteAddress": 0,
    "default": 0,
    "relativeWordAddress": 0,
    "type": 5,
    "wordSize": 1,
  },
  "in" => Object {
    "byteAddress": 4,
    "default": 0,
    "relativeWordAddress": 1,
    "type": 3,
    "wordSize": 1,
  },
  "out" => Object {
    "byteAddress": 8,
    "default": 0,
    "relativeWordAddress": 2,
    "type": 4,
    "wordSize": 1,
  },
  "counter" => Object {
    "byteAddress": 12,
    "default": 0,
    "relativeWordAddress": 3,
    "type": 5,
    "wordSize": 1,
  },
  "rate" => Object {
    "byteAddress": 16,
    "default": 0,
    "relativeWordAddress": 4,
    "type": 5,
    "wordSize": 1,
  },
  "buffer" => Object {
    "byteAddress": 20,
    "default": Array [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
    "relativeWordAddress": 5,
    "type": 0,
    "wordSize": 64,
  },
  "bufferPointer" => Object {
    "byteAddress": 276,
    "default": 20,
    "relativeWordAddress": 69,
    "type": 6,
    "wordSize": 1,
  },
}
`;

exports[`functional tests if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32 i32 i32)
    i32.const 4
    i32.load
    i32.load
    local.set 2
    i32.const 8
    local.get 2
    i32.store
    i32.const 12
    i32.load
    local.set 1
    local.get 1
    i32.const 16
    i32.load
    i32.ge_s
    if  ;; label = @1
      i32.const 12
      i32.const 0
      i32.store
    else
      local.get 1
      i32.const 1
      i32.add
      local.set 1
      i32.const 12
      local.get 1
      i32.store
      br 1 (;@0;)
    end
    i32.const 276
    i32.load
    local.set 0
    local.get 0
    local.get 2
    i32.store
    local.get 0
    i32.const 4
    i32.add
    local.set 0
    local.get 0
    i32.const 20
    i32.const 256
    i32.add
    i32.ge_u
    if  ;; label = @1
      i32.const 20
      local.set 0
    end
    i32.const 276
    local.get 0
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
