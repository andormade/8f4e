// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`adc if the generated memory map matches with the snapshot 1`] = `
Map {
  "default" => Object {
    "address": 0,
    "byteAddress": 0,
    "default": 0,
    "size": 1,
    "type": 5,
  },
  "in" => Object {
    "address": 1,
    "byteAddress": 4,
    "default": 0,
    "size": 1,
    "type": 3,
  },
  "out:1" => Object {
    "address": 2,
    "byteAddress": 8,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:2" => Object {
    "address": 3,
    "byteAddress": 12,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:3" => Object {
    "address": 4,
    "byteAddress": 16,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:4" => Object {
    "address": 5,
    "byteAddress": 20,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:5" => Object {
    "address": 6,
    "byteAddress": 24,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:6" => Object {
    "address": 7,
    "byteAddress": 28,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:7" => Object {
    "address": 8,
    "byteAddress": 32,
    "default": 0,
    "size": 1,
    "type": 4,
  },
  "out:8" => Object {
    "address": 9,
    "byteAddress": 36,
    "default": 0,
    "size": 1,
    "type": 4,
  },
}
`;

exports[`adc if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32)
    i32.const 4
    i32.load
    i32.load
    i32.const 128
    i32.div_s
    local.set 0
    i32.const 8
    local.get 0
    i32.const 1
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 12
    local.get 0
    i32.const 2
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 16
    local.get 0
    i32.const 4
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 20
    local.get 0
    i32.const 8
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 24
    local.get 0
    i32.const 16
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 28
    local.get 0
    i32.const 32
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 32
    local.get 0
    i32.const 64
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store
    i32.const 36
    local.get 0
    i32.const 128
    i32.and
    i32.const 0
    i32.gt_s
    if (result i32)  ;; label = @1
      i32.const 32767
    else
      i32.const 0
    end
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
