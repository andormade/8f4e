// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates correct module type descriptor 1`] = `
Object {
  "buttons": Array [
    Object {
      "height": 80,
      "id": "note:0",
      "onClick": [Function],
      "value": 0,
      "width": 16,
      "x": 24,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:1",
      "onClick": [Function],
      "value": 1,
      "width": 16,
      "x": 40,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:2",
      "onClick": [Function],
      "value": 2,
      "width": 16,
      "x": 56,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:3",
      "onClick": [Function],
      "value": 3,
      "width": 16,
      "x": 72,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:4",
      "onClick": [Function],
      "value": 4,
      "width": 16,
      "x": 88,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:5",
      "onClick": [Function],
      "value": 5,
      "width": 16,
      "x": 104,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:6",
      "onClick": [Function],
      "value": 6,
      "width": 16,
      "x": 120,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:7",
      "onClick": [Function],
      "value": 7,
      "width": 16,
      "x": 136,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:8",
      "onClick": [Function],
      "value": 8,
      "width": 16,
      "x": 152,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:9",
      "onClick": [Function],
      "value": 9,
      "width": 16,
      "x": 168,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:10",
      "onClick": [Function],
      "value": 10,
      "width": 16,
      "x": 184,
      "y": 32,
    },
    Object {
      "height": 80,
      "id": "note:11",
      "onClick": [Function],
      "value": 11,
      "width": 16,
      "x": 200,
      "y": 32,
    },
  ],
  "category": "Quantizer",
  "drawer": Object {
    "config": Object {
      "keyCount": 12,
      "notes": Map {
        -32767 => 0,
        -32251 => 1,
        -31735 => 2,
        -31219 => 3,
        -30703 => 4,
        -30187 => 5,
        -29671 => 6,
        -29155 => 7,
        -28639 => 8,
        -28123 => 9,
        -27607 => 10,
        -27091 => 11,
        -26575 => 0,
        -26059 => 1,
        -25543 => 2,
        -25027 => 3,
        -24511 => 4,
        -23995 => 5,
        -23479 => 6,
        -22963 => 7,
        -22447 => 8,
        -21931 => 9,
        -21415 => 10,
        -20899 => 11,
        -20383 => 0,
        -19867 => 1,
        -19351 => 2,
        -18835 => 3,
        -18319 => 4,
        -17803 => 5,
        -17287 => 6,
        -16771 => 7,
        -16255 => 8,
        -15739 => 9,
        -15223 => 10,
        -14707 => 11,
        -14191 => 0,
        -13675 => 1,
        -13159 => 2,
        -12643 => 3,
        -12127 => 4,
        -11611 => 5,
        -11095 => 6,
        -10579 => 7,
        -10063 => 8,
        -9547 => 9,
        -9031 => 10,
        -8515 => 11,
        -7999 => 0,
        -7483 => 1,
        -6967 => 2,
        -6451 => 3,
        -5935 => 4,
        -5419 => 5,
        -4903 => 6,
        -4387 => 7,
        -3871 => 8,
        -3355 => 9,
        -2839 => 10,
        -2323 => 11,
        -1807 => 0,
        -1291 => 1,
        -775 => 2,
        -259 => 3,
        258 => 4,
        774 => 5,
        1290 => 6,
        1806 => 7,
        2322 => 8,
        2838 => 9,
        3354 => 10,
        3870 => 11,
        4386 => 0,
        4902 => 1,
        5418 => 2,
        5934 => 3,
        6450 => 4,
        6966 => 5,
        7482 => 6,
        7998 => 7,
        8514 => 8,
        9030 => 9,
        9546 => 10,
        10062 => 11,
        10578 => 0,
        11094 => 1,
        11610 => 2,
        12126 => 3,
        12642 => 4,
        13158 => 5,
        13674 => 6,
        14190 => 7,
        14706 => 8,
        15222 => 9,
        15738 => 10,
        16254 => 11,
        16770 => 0,
        17286 => 1,
        17802 => 2,
        18318 => 3,
        18834 => 4,
        19350 => 5,
        19866 => 6,
        20382 => 7,
        20898 => 8,
        21414 => 9,
        21930 => 10,
        22446 => 11,
        22962 => 0,
        23478 => 1,
        23994 => 2,
        24510 => 3,
        25026 => 4,
        25542 => 5,
        26058 => 6,
        26574 => 7,
        27090 => 8,
        27606 => 9,
        28122 => 10,
        28638 => 11,
        29154 => 0,
        29670 => 1,
        30186 => 2,
        30702 => 3,
        31218 => 4,
        31734 => 5,
        32250 => 6,
      },
      "x": 24,
      "y": 32,
    },
    "name": "piano",
  },
  "engine": Object {
    "source": "
	inputPointer in 0
	output out 0
    private allocatedNotes 120
	public numberOfNotes 0
	array notes 120 -1 

	local bestMatchingValue
	local difference
	local _in
	local noteMemoryPointer
	local noteValue
	local smallestDifference
	local notesEndAddressPointer

	push in
	localSet _in

	# Calculate the address of the last note.
	push numberOfNotes
	push 4
	mul
	pushRef notes
	add
	localSet notesEndAddressPointer

	# Set the smallest difference to the largest 32bit signed number.
	push 2147483647
	localSet smallestDifference

	# Set the note memory pointer to the start address
	pushRef notes
	localSet noteMemoryPointer

	block void
		loop void
			# Branch if the memory pointer would overflow.
			push noteMemoryPointer
			push notesEndAddressPointer
			greaterOrEqualUnsigned
			branchIfTrue 1

			# Load a note value from the memory.
			push noteMemoryPointer
			load
			localSet noteValue

			# Calculate difference between input and the note.
			push noteValue
			push _in
			sub
			localSet difference

			# Calculate abs
			push difference
			push 0
			lessThan
			if 
				push 0
				push difference
				sub
			else
				push difference
			end
			localSet difference

			# Compare with the smallest difference.
			push difference
			push smallestDifference
			lessOrEqual
			if void
				# If it's actually smaller than the previusly recorded
				# smallest difference, then overwirte it and save the
				# current note value.			
				push difference
				localSet smallestDifference
				push noteValue
				localSet bestMatchingValue
			end

			# Increment the note memory pointer by 4 (i32 is 4 bytes)
			push noteMemoryPointer
			push 4
			add
			localSet noteMemoryPointer
		loopEnd
	end

	# Prepare memory address for storing the output value.
	pushRef out
	push bestMatchingValue
	store
",
  },
  "extractState": [Function],
  "height": 128,
  "initialState": Object {},
  "inputs": Array [
    Object {
      "height": 16,
      "id": "in",
      "label": "",
      "width": 16,
      "x": 0,
      "y": 32,
    },
  ],
  "insertState": [Function],
  "name": "Quantizer 12",
  "outputs": Array [
    Object {
      "height": 16,
      "id": "out",
      "label": "",
      "width": 16,
      "x": 224,
      "y": 32,
    },
  ],
  "width": 240,
}
`;
