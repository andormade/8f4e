const font = [
	// A-Z
	[0x38, 0x44, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x84, 0xf8, 0x84, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x82, 0x82, 0x82, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x9e, 0x82, 0x82, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x84, 0x88, 0x90, 0xa0, 0xd0, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00],
	[0xfc, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x8a, 0x44, 0x3a, 0x00, 0x00, 0x00, 0x00],
	[0xfc, 0x82, 0x82, 0x82, 0xfc, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x80, 0x40, 0x38, 0x04, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0x54, 0x54, 0x54, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x42, 0x28, 0x10, 0x28, 0x42, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x42, 0x42, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	// a-z
	[0x38, 0x44, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x8f, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x84, 0xf8, 0x84, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x82, 0x82, 0x82, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x9e, 0x82, 0x82, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x84, 0x88, 0x90, 0xa0, 0xd0, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0xc6, 0xaa, 0x92, 0x82, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00],
	[0xfc, 0x82, 0x82, 0x82, 0xfc, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x82, 0x82, 0x82, 0x82, 0x8a, 0x44, 0x3a, 0x00, 0x00, 0x00, 0x00],
	[0xfc, 0x82, 0x82, 0x82, 0xfc, 0x90, 0x88, 0x84, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x38, 0x44, 0x80, 0x40, 0x38, 0x04, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0x54, 0x54, 0x54, 0x28, 0x28, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x42, 0x28, 0x10, 0x28, 0x42, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x42, 0x42, 0x28, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	// 0-1
	[0x38, 0x44, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x8f, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x84, 0xf8, 0x84, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x80, 0x80, 0x80, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0xf8, 0x84, 0x82, 0x82, 0x82, 0x82, 0x82, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x80, 0x80, 0x80, 0xf0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00],
	[0x3c, 0x42, 0x80, 0x80, 0x9e, 0x82, 0x82, 0x42, 0x3c, 0x00, 0x00, 0x00, 0x00],
	[0x82, 0x82, 0x82, 0x82, 0xfe, 0x82, 0x82, 0x82, 0x82, 0x00, 0x00, 0x00, 0x00],
	[0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0xfe, 0x00, 0x00, 0x00, 0x00],
	[0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x84, 0x78, 0x00, 0x00, 0x00, 0x00],
];

const forEachBit = function (byte: number, callback: (isByteSet: boolean, nthBit: number) => void) {
	for (let i = 0; i < 8; i++) {
		const mask = 1 << (7 - i);
		callback((byte & mask) !== 0, i);
	}
};

const generateFont = function (ctx: OffscreenCanvasRenderingContext2D, x: number = 0, y: number = 0) {
	ctx.fillStyle = 'rgba(255,255,255,255)';

	// A-Z
	for (let j = 0; j < 25; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + y, 1, 1);
			});
		}
	}

	// a-z
	for (let j = 0; j < 25; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + 14 + y, 1, 1);
			});
		}
	}

	// 0-9
	for (let j = 0; j < 10; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + 28 + y, 1, 1);
			});
		}
	}
};

export default generateFont;
