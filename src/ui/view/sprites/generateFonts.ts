const EMPT = 0x00;

const pad = function (paddingLeft: number, arr: number[], paddingRight: number = 0): number[] {
	return [...new Array(paddingLeft).fill(0x00), ...arr, ...new Array(paddingRight).fill(0x00)];
};

const same = function (byte: number, times: number): number[] {
	return new Array(times).fill(byte);
};

const mirr = function (toBeMirrored: number[], middle: number[]): number[] {
	return [...toBeMirrored, ...middle, ...toBeMirrored.slice().reverse()];
};

export const getGlyphInfo = function (
	letter: string
): { x: number; y: number; spriteHeight: number; spriteWidth: number } {
	const code = letter.charCodeAt(0);
	let posY = 0;
	let posX = 0;

	if (code >= 97 && code <= 122) {
		posX = code - 97;
		posY = 0;
	} else if (code >= 48 && code <= 57) {
		posX = code - 48;
		posY = 2;
	} else if (code >= 65 && code <= 84) {
		posX = code - 65;
		posY = 1;
	} else {
		posX = 0;
		posY = 5;
	}

	return {
		x: (7 + 1) * posX,
		y: (15 + 1) * posY,
		spriteHeight: 15,
		spriteWidth: 7,
	};
};

const font = [
	// a-z
	pad(4, [0x7c, 0x82, 0x02, 0x7e, 0x82, 0x86, 0x7a]),
	[...same(0x80, 4), 0xbc, 0xc2, ...same(0x82, 3), 0xc2, 0xbc],
	pad(4, mirr([0x7c, 0x82], same(0x80, 3))),
	[...same(0x02, 4), 0x7a, 0x86, ...same(0x82, 3), 0x86, 0x7a],
	pad(4, [0x7c, 0x82, 0x82, 0xfc, 0x80, 0x82, 0x7c]),
	[0x1c, 0x22, 0x20, 0x20, 0xf8, ...same(0x20, 6)],
	pad(4, [0x7a, 0x86, ...same(0x82, 3), 0x46, 0x3a, 0x02, 0x84, 0x78]),
	[...same(0x80, 4), 0xbc, 0xc2, ...same(0x82, 5)],
	pad(2, [0x10, 0x00, ...mirr([0x7c], same(0x10, 5))]),
	pad(2, [0x04, 0x00, ...same(0x04, 8), 0x84, 0x78]),
	[...same(0x80, 4), 0x88, 0x90, 0xa0, 0xc0, 0xa0, 0x90, 0x8e],
	[0x70, ...same(0x10, 9), 0xfe],
	pad(4, [0x6c, ...same(0x92, 3), ...same(0x82, 3)]),
	pad(4, [0x3c, 0x40, ...same(0x82, 5)]),
	pad(4, mirr([0x7c], same(0x82, 5))),
	pad(4, [...mirr([0xbc, 0xc2], same(0x82, 3)), ...same(0x80, 3)]),
	pad(4, [...mirr([0x7a, 0x86], same(0x82, 3)), ...same(0x02, 3)]),
	pad(4, [0xbe, 0xc0, ...same(0x80, 5)]),
	pad(4, [0x7e, 0x80, 0x80, 0x7c, 0x02, 0x02, 0xfc]),
	[...same(0x40, 4), 0xf0, ...same(0x40, 4), 0x20, 0x1e],
	pad(4, [...same(0x82, 5), 0x44, 0x38]),
	pad(4, [0x82, 0x82, 0x44, 0x44, 0x28, 0x28, 0x10]),
	pad(4, [...same(0x82, 3), 0x54, 0x54, 0x28, 0x28]),
	pad(4, mirr([0x82, 0x44, 0x28], [0x10])),
	pad(4, [...same(0x82, 5), 0x46, 0x3a, 0x02, 0x84, 0x78]),
	pad(4, [0xfe, 0x04, 0x08, 0x10, 0x20, 0x40, 0xfe]),

	// A-Z
	[0x38, 0x44, ...same(0x82, 3), 0xfe, ...same(0x82, 5)],
	mirr([0xf8, 0x84, 0x82, 0x82, 0x84], [0xf8]),
	mirr([0x3c, 0x42], same(0x80, 7)),
	mirr([0xf8, 0x84], same(0x82, 7)),
	mirr([0xfe, ...same(0x80, 4)], [0xf0]),
	[0xfe, ...same(0x80, 4), 0xf0, ...same(0x80, 4), 0x80],
	[0x3c, 0x42, ...same(0x80, 3), 0x9e, ...same(0x82, 3), 0x42, 0x3c],
	mirr(same(0x82, 5), [0xfe]),
	mirr([0xfe], same(0x10, 9)),
	[0x02, ...same(0x02, 8), 0x84, 0x78],
	[0x82, 0x84, 0x88, 0x90, 0xa0, 0xd0, 0x88, 0x84, 0x82],
	[...same(0x80, 10), 0xfe],
	[0x82, 0xc6, 0xaa, 0x92, ...same(0x82, 7)],
	[0x82, 0xc2, 0xa2, 0x92, 0x8a, 0x86, ...same(0x82, 5)],
	[0x38, 0x44, ...same(0x82, 7), 0x44, 0x38],
	[0xfc, ...same(0x82, 4), 0xfc, ...same(0x80, 5)],
	[0x38, 0x44, ...same(0x82, 6), 0x8a, 0x44, 0x3a],
	[0xfc, ...same(0x82, 4), 0xfc, 0x90, 0x88, 0x84, 0x82, 0x82],
	[0x38, 0x44, 0x80, 0x80, 0x40, 0x38, 0x04, 0x02, 0x02, 0x84, 0x78],
	[0xfe, ...same(0x10, 10)],
	[...same(0x82, 9), 0x44, 0x38],
	[0x82, 0x82, 0x82, 0x82, 0x44, 0x44, 0x44, 0x28, 0x28, 0x28, 0x10],
	[...same(0x82, 4), 0x54, 0x54, 0x54, 0x54, 0x28, 0x28, 0x28],
	mirr([0x82, 0x82, 0x44, 0x44, 0x28], [0x10]),
	[0x82, 0x82, 0x44, 0x44, 0x28, 0x28, ...same(0x10, 5)],
	[0xfe, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0xfe],

	// 0 - 9
	mirr([0x38, 0x44, 0x82, 0x82], same(0x92, 3)),
	[0x10, 0x30, 0x50, 0x90, ...same(0x10, 6), 0xfe],
	[0x78, 0x84, 0x02, 0x02, 0x04, 0x38, 0x40, ...same(0x80, 3), 0xfe],
	mirr([0x78, 0x84, 0x02, 0x02, 0x04], [0x38]),
	[...same(0x80, 3), 0x90, 0x90, 0xfe, ...same(0x10, 5)],
	[0xfe, ...same(0x80, 4), 0xf8, 0x04, 0x02, 0x02, 0x04, 0xf8],
	[0x3c, 0x40, ...same(0x80, 3), 0xb8, 0xc4, 0x82, 0x82, 0x44, 0x38],
	[0xfe, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20],
	[0x38, 0x44, 0x82, 0x82, 0x44, 0x38, 0x44, 0x82, 0x82, 0x44, 0x38],
	[0x38, 0x44, 0x82, 0x82, 0x46, 0x3a, ...same(0x02, 3), 0x04, 0x7c],
];

const forEachBit = function (byte: number, callback: (isByteSet: boolean, nthBit: number) => void) {
	for (let i = 0; i < 8; i++) {
		const mask = 1 << (7 - i);
		callback((byte & mask) !== 0, i);
	}
};

const generateFont = function (ctx: OffscreenCanvasRenderingContext2D, x: number = 0, y: number = 0, font: number[][]) {
	// A-Z
	for (let j = 0; j < 26; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + y, 1, 1);
			});
		}
	}

	// a-z
	for (let j = 0; j < 26; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j + 26][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + 16 + y, 1, 1);
			});
		}
	}

	// 0-9
	for (let j = 0; j < 10; j++) {
		for (let i = 0; i < font[j].length; i++) {
			forEachBit(font[j + 52][i], function (bit, nthBit) {
				bit && ctx.fillRect(j * 8 + nthBit + x, i + 32 + y, 1, 1);
			});
		}
	}
};

const generateFonts = function (ctx: OffscreenCanvasRenderingContext2D, x: number = 0, y: number = 0) {
	ctx.fillStyle = 'rgba(255,255,255,255)';
	generateFont(ctx, x, y, font);
	ctx.fillStyle = 'rgba(0,0,0,255)';
	generateFont(ctx, x, y + 42, font);
};

export default generateFonts;
