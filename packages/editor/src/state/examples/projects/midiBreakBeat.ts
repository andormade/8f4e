import { Project } from '../../types';

const project: Project = {
	title: 'MIDI Break Beat',
	author: 'Andor Polgar',
	description: '',
	modules: [
		{
			code: [
				'module midinoteout4',
				'',
				'use generalMIDIDrumCodes',
				'',
				'int note SNARE_DRUM',
				'int channel 1',
				'',
				'int* gate and2.out',
				'int velocity 127',
				'',
				'end',
			],
			x: 1656,
			y: 880,
			isOpen: true,
		},
		{
			code: [
				'module midinoteout5',
				'',
				'use generalMIDIDrumCodes',
				'',
				'int note HI_HAT_CLOSED',
				'int channel 1',
				'',
				'int* gate and3.out',
				'int velocity 127',
				'',
				'end',
			],
			x: 1656,
			y: 1184,
			isOpen: true,
		},
		{
			code: [
				'module midinoteout6',
				'',
				'use generalMIDIDrumCodes',
				'',
				'int note HI_HAT_OPEN',
				'int channel 1',
				'',
				'int* gate and4.out',
				'int velocity 127',
				'',
				'end',
			],
			x: 1656,
			y: 1488,
			isOpen: true,
		},
		{
			code: [
				'module midinoteout3',
				'',
				'use generalMIDIDrumCodes',
				'',
				'int note KICK_DRUM',
				'int channel 1',
				'',
				'int* gate and.out',
				'int velocity 127',
				'',
				'end',
			],
			x: 1656,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module generalMIDIDrumCodes',
				'',
				'const LASER 27',
				'const WHIP 28',
				'const SCRATCH_PUSH 29',
				'const SCRATCH_PULL 30',
				'const STICK_CLICK 31',
				'const METRONOME_CLICK 32',
				'const METRONOME_BELL 34',
				'const BASS_DRUM 35',
				'const KICK_DRUM 36',
				'const SNARE_CROSS_STICK 37',
				'const SNARE_DRUM 38',
				'const HAND_CLAP 39',
				'const ELECTRIC_SNARE_DRUM 40',
				'const FLOOR_TOM_2 41',
				'const HI_HAT_CLOSED 42',
				'const FLOOR_TOM_1 43',
				'const HI_HAT_FOOT 44',
				'const LOW_TOM 45',
				'const HI_HAT_OPEN 46',
				'const LOW_MID_TOM 47',
				'const HIGH_MID_TOM 48',
				'const CRASH_CYMBAL 49',
				'const HIGH_TOM 50',
				'const RIDE_CYMBAL 51',
				'const CHINA_CYMBAL 52',
				'const RIDE_BELL 53',
				'const TAMBOURINE 54',
				'const SPLASH_CYMBAL 55',
				'const COWBELL 56',
				'const CRASH_CYMBAL_2 57',
				'const VIBRASLAP 58',
				'const RIDE_CYMBAL_2 59',
				'const HIGH_BONGO 60',
				'const LOW_BONGO 61',
				'const CONGA_DEAD_STROKE 62',
				'const CONGA 63',
				'const TUMBA 64',
				'const HIGH_TIMBALE 65',
				'const LOW_TIMBALE 66',
				'const HIGH_AGOGO 67',
				'const LOW_AGOGO 68',
				'const CABASA 69',
				'const MARACAS 70',
				'const WHISTLE_SHORT 71',
				'const WHISTLE_LONG 72',
				'const GUIRO_SHORT 73',
				'const GUIRO_LONG 74',
				'const CLAVES 75',
				'const HIGH_WOODBLOCK 76',
				'const LOW_WOODBLOCK 77',
				'const CUICA_HIGH 78',
				'const CUICA_LOW 79',
				'const TRIANGLE_MUTE 80',
				'const TRIANGLE_OPEN 81',
				'const SHAKER 82',
				'const SLEIGH_BELL 83',
				'const BELL_TREE 84',
				'const CASTANETS 85',
				'const SURDU_DEAD_STROKE 86',
				'const SURDU 87',
				'const SNARE_DRUM_ROD 91',
				'const OCEAN_DRUM 92',
				'const SNARE_DRUM_BRUSH 93',
				'',
				'end',
			],
			x: 1968,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module break2',
				'',
				'; MSb 0 kick',
				'; 1 snare',
				'; 2 closed hh',
				'; 3 open hh',
				'',
				'int step1  0b10010000',
				'int step2  0b00000000',
				'int step3  0b00100000',
				'int tesp4  0b00000000',
				'int step5  0b01100000',
				'int step6  0b00000000',
				'int step7  0b00100000',
				'int step8  0b10000000',
				'int step9  0b10100000',
				'int step10 0b00000000',
				'int step11 0b10100000',
				'int step12 0b00000000',
				'int step13 0b01100000',
				'int step14 0b00000000',
				'int step15 0b00100000',
				'int last   0b00000000',
				'',
			],
			x: 392,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module break',
				'',
				'; MSb 0 kick',
				'; 1 snare',
				'; 2 closed hh',
				'; 3 open hh',
				'',
				'int step1  0b10100000',
				'int step2  0b00000000',
				'int step3  0b00100000',
				'int tesp4  0b00000000',
				'int step5  0b01100000',
				'int step6  0b00000000',
				'int step7  0b00100000',
				'int step8  0b10100000',
				'int step9  0b10100000',
				'int step10 0b00000000',
				'int step11 0b00010000',
				'int step12 0b00000000',
				'int step13 0b01100000',
				'int step14 0b00000000',
				'int step15 0b10100000',
				'int last   0b00000000',
				'',
			],
			x: 64,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module pulse',
				'',
				'int counter',
				'int out',
				'',
				'const PULSE_WIDTH 2',
				'const PERIOD 6',
				'',
				'push &out',
				'push counter',
				'push PULSE_WIDTH',
				'lessOrEqual',
				'if ',
				' push 1',
				'else',
				' push 0',
				'end',
				'store ',
				'',
				'push counter',
				'push PERIOD',
				'equal',
				'if void ',
				' push &counter',
				' push 0',
				' store',
				'end',
				'',
				'push &counter',
				'push counter',
				'push 1',
				'add ',
				'store',
			],
			x: 544,
			y: 1024,
			isOpen: true,
		},
		{
			code: [
				'module and',
				'         ;   .----.',
				"int* in1 ; --+     '",
				'int out  ;   | and  |---',
				'int* in2 ; --+     .',
				"         ;   '----'",
				'',
				'init in1 decToBin.bit0',
				'init in2 pulse.out',
				'',
				'push &out',
				'push *in1',
				'push *in2',
				'and',
				'store',
				'',
				'end',
			],
			x: 1360,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module and2',
				'         ;   .----.',
				"int* in1 ; --+     '",
				'int out  ;   | and  |---',
				'int* in2 ; --+     .',
				"         ;   '----'",
				'',
				'init in1 decToBin.bit1',
				'init in2 pulse.out',
				'',
				'push &out',
				'push *in1',
				'push *in2',
				'and',
				'store',
				'',
				'end',
			],
			x: 1360,
			y: 880,
			isOpen: true,
		},
		{
			code: [
				'module and3',
				'         ;   .----.',
				"int* in1 ; --+     '",
				'int out  ;   | and  |---',
				'int* in2 ; --+     .',
				"         ;   '----'",
				'',
				'init in1 decToBin.bit2',
				'init in2 pulse.out',
				'',
				'push &out',
				'push *in1',
				'push *in2',
				'and',
				'store',
				'',
				'end',
			],
			x: 1360,
			y: 1184,
			isOpen: true,
		},
		{
			code: [
				'module and4',
				'         ;   .----.',
				"int* in1 ; --+     '",
				'int out  ;   | and  |---',
				'int* in2 ; --+     .',
				"         ;   '----'",
				'',
				'init in1 decToBin.bit3',
				'init in2 pulse.out',
				'',
				'push &out',
				'push *in1',
				'push *in2',
				'and',
				'store',
				'',
				'end',
			],
			x: 1368,
			y: 1488,
			isOpen: true,
		},
		{
			code: [
				'module decToBin',
				'',
				'int* in sequencer.out',
				'',
				'int bit0',
				'int bit1',
				'int bit2 ',
				'int bit3',
				'int bit4 ',
				'int bit5',
				'int bit6',
				'int bit7',
				'',
				'int bitPointer 0',
				'',
				'const HIGH 1',
				'const LOW 0',
				'',
				'push &bitPointer',
				'push 0',
				'store',
				'',
				'loop',
				' ; Exit loop if bitPointer',
				' ; is greater than 7',
				' push bitPointer',
				' push 7',
				' greaterThan',
				' branchIfTrue 1',
				' ',
				' ; Calculate output address',
				' push &bit0',
				' push bitPointer',
				' push 4',
				' mul',
				' add',
				'',
				' push *in',
				' push 0b10000000',
				' push bitPointer',
				' shiftRight',
				' and',
				' if int',
				'  push HIGH',
				' else',
				'  push LOW',
				' end ',
				'',
				' store',
				'',
				' ; Increment bitPointer',
				' push &bitPointer',
				' push bitPointer',
				' push 1',
				' add',
				' store',
				'',
				'end',
				'',
				'end',
			],
			x: 1032,
			y: 576,
			isOpen: true,
		},
		{
			code: [
				'module sequencer',
				'',
				'int* start  break2.step1',
				'int* last   break2.last',
				'int* stepPointer break2.step1',
				'int* trigger pulse.out',
				'',
				'int out',
				'',
				'push &out',
				'push *stepPointer',
				'store',
				'',
				'; Increment step pointer',
				'push *trigger',
				'risingEdge',
				'if void',
				' push &stepPointer',
				' push start',
				' push last',
				' cycle',
				'end',
				'',
				'end',
			],
			x: 712,
			y: 576,
			isOpen: true,
		},
	],
	groups: [],
	viewport: { x: -352, y: -528 },
	rnbo: { patchers: {} },
	sampleRate: 50,
};

export default project;
