// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests if the generated memory map matches with the snapshot 1`] = `
Array [
  Object {
    "address": 0,
    "default": 0,
    "type": 5,
  },
  Object {
    "address": 1,
    "default": 6,
    "type": 6,
  },
  Object {
    "address": 2,
    "default": 6,
    "type": 6,
  },
  Object {
    "address": 3,
    "default": 4,
    "type": 6,
  },
  Object {
    "address": 4,
    "default": 0,
    "id": "in:1",
    "type": 3,
  },
  Object {
    "address": 5,
    "default": 0,
    "id": "in:2",
    "type": 3,
  },
  Object {
    "address": 6,
    "default": 0,
    "id": "in:3",
    "type": 3,
  },
  Object {
    "address": 7,
    "default": 0,
    "id": "in:4",
    "type": 3,
  },
  Object {
    "address": 8,
    "default": 0,
    "id": "in:5",
    "type": 3,
  },
  Object {
    "address": 9,
    "default": 0,
    "id": "in:6",
    "type": 3,
  },
  Object {
    "address": 10,
    "default": 0,
    "id": "out:1",
    "type": 4,
  },
  Object {
    "address": 11,
    "default": 0,
    "id": "out:2",
    "type": 4,
  },
  Object {
    "address": 12,
    "default": 0,
    "id": "out:3",
    "type": 4,
  },
  Object {
    "address": 13,
    "default": 0,
    "id": "out:4",
    "type": 4,
  },
  Object {
    "address": 14,
    "default": 0,
    "id": "out:5",
    "type": 4,
  },
  Object {
    "address": 15,
    "default": 0,
    "id": "out:6",
    "type": 4,
  },
  Object {
    "address": 16,
    "default": 0,
    "id": "data:1",
    "type": 6,
  },
  Object {
    "address": 17,
    "default": 0,
    "id": "data:2",
    "type": 6,
  },
  Object {
    "address": 18,
    "default": 0,
    "id": "data:3",
    "type": 6,
  },
  Object {
    "address": 19,
    "default": 0,
    "id": "data:4",
    "type": 6,
  },
]
`;

exports[`functional tests if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    i32.const 10
    i32.const 4
    i32.load
    i32.load
    i32.store
    i32.const 11
    i32.const 5
    i32.load
    i32.load
    i32.store
    i32.const 12
    i32.const 6
    i32.load
    i32.load
    i32.store
    i32.const 13
    i32.const 7
    i32.load
    i32.load
    i32.store
    i32.const 14
    i32.const 8
    i32.load
    i32.load
    i32.store
    i32.const 15
    i32.const 9
    i32.load
    i32.load
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
