// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`const if the generated AST, WAT and memory map match the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "const",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "TEST1",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 420,
      },
    ],
    "instruction": "const",
    "lineNumber": 2,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "TEST2",
      },
      Object {
        "isInteger": false,
        "type": "literal",
        "value": 420.69,
      },
    ],
    "instruction": "const",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "TEST3",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 69,
      },
    ],
    "instruction": "const",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "output1",
      },
    ],
    "instruction": "int",
    "lineNumber": 6,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "output2",
      },
    ],
    "instruction": "float",
    "lineNumber": 7,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "output3",
      },
      Object {
        "type": "identifier",
        "value": "TEST3",
      },
    ],
    "instruction": "int",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&output1",
      },
    ],
    "instruction": "push",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "TEST1",
      },
    ],
    "instruction": "push",
    "lineNumber": 11,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 12,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&output2",
      },
    ],
    "instruction": "push",
    "lineNumber": 14,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "TEST2",
      },
    ],
    "instruction": "push",
    "lineNumber": 15,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 16,
  },
  Object {
    "arguments": Array [],
    "instruction": "moduleEnd",
    "lineNumber": 18,
  },
]
`;

exports[`const if the generated AST, WAT and memory map match the snapshot 2`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    i32.const 0
    i32.const 420
    i32.store
    i32.const 4
    f32.const 0x1.a4b0a4p+8 (;=420.69;)
    f32.store)
  (export \\"test\\" (func 0)))
"
`;

exports[`const if the generated AST, WAT and memory map match the snapshot 3`] = `
Map {
  "output1" => Object {
    "byteAddress": 0,
    "default": 0,
    "elementWordSize": 4,
    "id": "output1",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 0,
    "wordAlignedSize": 1,
  },
  "output2" => Object {
    "byteAddress": 4,
    "default": 0,
    "elementWordSize": 4,
    "id": "output2",
    "isInteger": false,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "float",
    "wordAlignedAddress": 1,
    "wordAlignedSize": 1,
  },
  "output3" => Object {
    "byteAddress": 8,
    "default": 69,
    "elementWordSize": 4,
    "id": "output3",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 2,
    "wordAlignedSize": 1,
  },
}
`;
