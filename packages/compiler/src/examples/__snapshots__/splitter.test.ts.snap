// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests if the generated ast matches with the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "splitter",
      },
    ],
    "instruction": "module",
    "lineNumber": 1,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "zero",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "memory",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in",
      },
      Object {
        "type": "identifier",
        "value": "&zero",
      },
    ],
    "instruction": "memory",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out:1",
      },
      Object {
        "type": "identifier",
        "value": "&zero",
      },
    ],
    "instruction": "memory",
    "lineNumber": 5,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out:2",
      },
      Object {
        "type": "identifier",
        "value": "&zero",
      },
    ],
    "instruction": "memory",
    "lineNumber": 6,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out:3",
      },
      Object {
        "type": "identifier",
        "value": "&zero",
      },
    ],
    "instruction": "memory",
    "lineNumber": 7,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out:4",
      },
      Object {
        "type": "identifier",
        "value": "&zero",
      },
    ],
    "instruction": "memory",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "local",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "*in",
      },
    ],
    "instruction": "push",
    "lineNumber": 12,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 13,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out:1",
      },
    ],
    "instruction": "push",
    "lineNumber": 15,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "push",
    "lineNumber": 16,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 17,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out:2",
      },
    ],
    "instruction": "push",
    "lineNumber": 19,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "push",
    "lineNumber": 20,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 21,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out:3",
      },
    ],
    "instruction": "push",
    "lineNumber": 23,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "push",
    "lineNumber": 24,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 25,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out:4",
      },
    ],
    "instruction": "push",
    "lineNumber": 27,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "input",
      },
    ],
    "instruction": "push",
    "lineNumber": 28,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 29,
  },
]
`;

exports[`functional tests if the generated memory map matches with the snapshot 1`] = `
Map {
  "zero" => Object {
    "byteAddress": 0,
    "default": 0,
    "id": "zero",
    "isInteger": true,
    "lineNumber": 3,
    "relativeWordAddress": 0,
    "type": 1,
    "wordAddress": 0,
    "wordSize": 1,
  },
  "in" => Object {
    "byteAddress": 4,
    "default": 0,
    "id": "in",
    "isInteger": true,
    "lineNumber": 4,
    "relativeWordAddress": 1,
    "type": 1,
    "wordAddress": 1,
    "wordSize": 1,
  },
  "out:1" => Object {
    "byteAddress": 8,
    "default": 0,
    "id": "out:1",
    "isInteger": true,
    "lineNumber": 5,
    "relativeWordAddress": 2,
    "type": 1,
    "wordAddress": 2,
    "wordSize": 1,
  },
  "out:2" => Object {
    "byteAddress": 12,
    "default": 0,
    "id": "out:2",
    "isInteger": true,
    "lineNumber": 6,
    "relativeWordAddress": 3,
    "type": 1,
    "wordAddress": 3,
    "wordSize": 1,
  },
  "out:3" => Object {
    "byteAddress": 16,
    "default": 0,
    "id": "out:3",
    "isInteger": true,
    "lineNumber": 7,
    "relativeWordAddress": 4,
    "type": 1,
    "wordAddress": 4,
    "wordSize": 1,
  },
  "out:4" => Object {
    "byteAddress": 20,
    "default": 0,
    "id": "out:4",
    "isInteger": true,
    "lineNumber": 8,
    "relativeWordAddress": 5,
    "type": 1,
    "wordAddress": 5,
    "wordSize": 1,
  },
}
`;

exports[`functional tests if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32)
    i32.const 4
    i32.load
    i32.load
    local.set 0
    i32.const 8
    local.get 0
    i32.store
    i32.const 12
    local.get 0
    i32.store
    i32.const 16
    local.get 0
    i32.store
    i32.const 20
    local.get 0
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
