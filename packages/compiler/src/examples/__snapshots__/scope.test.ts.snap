// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests if the generated ast matches with the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "scope",
      },
    ],
    "instruction": "module",
    "lineNumber": 1,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "defaultValue",
      },
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "private",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in",
      },
      Object {
        "type": "identifier",
        "value": "defaultValue",
      },
    ],
    "instruction": "inputPointer",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out",
      },
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "output",
    "lineNumber": 5,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "counter",
      },
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "private",
    "lineNumber": 7,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "rate",
      },
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "private",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "buffer",
      },
      Object {
        "type": "literal",
        "value": 64,
      },
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "array",
    "lineNumber": 9,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "bufferPointer",
      },
      Object {
        "type": "identifier",
        "value": "buffer",
      },
    ],
    "instruction": "public",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "local",
    "lineNumber": 12,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "local",
    "lineNumber": 13,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_input",
      },
    ],
    "instruction": "local",
    "lineNumber": 14,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in",
      },
    ],
    "instruction": "push",
    "lineNumber": 16,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_input",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 17,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out",
      },
    ],
    "instruction": "push",
    "lineNumber": 19,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_input",
      },
    ],
    "instruction": "push",
    "lineNumber": 20,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 21,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 23,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 24,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 26,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "rate",
      },
    ],
    "instruction": "push",
    "lineNumber": 27,
  },
  Object {
    "arguments": Array [],
    "instruction": "greaterOrEqual",
    "lineNumber": 28,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "void",
      },
    ],
    "instruction": "if",
    "lineNumber": 29,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 30,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "push",
    "lineNumber": 31,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 32,
  },
  Object {
    "arguments": Array [],
    "instruction": "else",
    "lineNumber": 33,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 34,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "push",
    "lineNumber": 35,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 36,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 37,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 39,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 40,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 41,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "branch",
    "lineNumber": 42,
  },
  Object {
    "arguments": Array [],
    "instruction": "end",
    "lineNumber": 43,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 45,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 46,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 48,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_input",
      },
    ],
    "instruction": "push",
    "lineNumber": 49,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 50,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 53,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "literal",
        "value": 4,
      },
    ],
    "instruction": "push",
    "lineNumber": 54,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 55,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 56,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 59,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&buffer",
      },
    ],
    "instruction": "push",
    "lineNumber": 60,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "literal",
        "value": 256,
      },
    ],
    "instruction": "push",
    "lineNumber": 61,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 62,
  },
  Object {
    "arguments": Array [],
    "instruction": "greaterOrEqualUnsigned",
    "lineNumber": 63,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "void",
      },
    ],
    "instruction": "if",
    "lineNumber": 64,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&buffer",
      },
    ],
    "instruction": "push",
    "lineNumber": 65,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 66,
  },
  Object {
    "arguments": Array [],
    "instruction": "end",
    "lineNumber": 67,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 69,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_bufferPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 70,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 71,
  },
]
`;

exports[`functional tests if the generated memory map matches with the snapshot 1`] = `
Map {
  "defaultValue" => Object {
    "byteAddress": 0,
    "default": 0,
    "id": "defaultValue",
    "lineNumber": 3,
    "relativeWordAddress": 0,
    "type": 5,
    "wordSize": 1,
  },
  "in" => Object {
    "byteAddress": 4,
    "default": 0,
    "id": "in",
    "lineNumber": 4,
    "relativeWordAddress": 1,
    "type": 3,
    "wordSize": 1,
  },
  "out" => Object {
    "byteAddress": 8,
    "default": 0,
    "id": "out",
    "lineNumber": 5,
    "relativeWordAddress": 2,
    "type": 4,
    "wordSize": 1,
  },
  "counter" => Object {
    "byteAddress": 12,
    "default": 0,
    "id": "counter",
    "lineNumber": 7,
    "relativeWordAddress": 3,
    "type": 5,
    "wordSize": 1,
  },
  "rate" => Object {
    "byteAddress": 16,
    "default": 0,
    "id": "rate",
    "lineNumber": 8,
    "relativeWordAddress": 4,
    "type": 5,
    "wordSize": 1,
  },
  "buffer" => Object {
    "byteAddress": 20,
    "default": Array [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
    "id": "buffer",
    "lineNumber": 9,
    "relativeWordAddress": 5,
    "type": 0,
    "wordSize": 64,
  },
  "bufferPointer" => Object {
    "byteAddress": 276,
    "default": 20,
    "id": "bufferPointer",
    "lineNumber": 10,
    "relativeWordAddress": 69,
    "type": 6,
    "wordSize": 1,
  },
}
`;

exports[`functional tests if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32 i32 i32)
    i32.const 4
    i32.load
    i32.load
    local.set 2
    i32.const 8
    local.get 2
    i32.store
    i32.const 12
    i32.load
    local.set 1
    local.get 1
    i32.const 16
    i32.load
    i32.ge_s
    if  ;; label = @1
      i32.const 12
      i32.const 0
      i32.store
    else
      local.get 1
      i32.const 1
      i32.add
      local.set 1
      i32.const 12
      local.get 1
      i32.store
      br 1 (;@0;)
    end
    i32.const 276
    i32.load
    local.set 0
    local.get 0
    local.get 2
    i32.store
    local.get 0
    i32.const 4
    i32.add
    local.set 0
    local.get 0
    i32.const 20
    i32.const 256
    i32.add
    i32.ge_u
    if  ;; label = @1
      i32.const 20
      local.set 0
    end
    i32.const 276
    local.get 0
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
