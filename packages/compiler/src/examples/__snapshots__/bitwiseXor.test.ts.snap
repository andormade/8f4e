// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bitwiseXor if the generated ast matches with the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "bitwiseXor",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "default1",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 2,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "default2",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in:1",
      },
      Object {
        "type": "identifier",
        "value": "&default1",
      },
    ],
    "instruction": "int*",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in:2",
      },
      Object {
        "type": "identifier",
        "value": "&default2",
      },
    ],
    "instruction": "int*",
    "lineNumber": 5,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 6,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out",
      },
    ],
    "instruction": "push",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "*in:1",
      },
    ],
    "instruction": "push",
    "lineNumber": 9,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "*in:2",
      },
    ],
    "instruction": "push",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [],
    "instruction": "xor",
    "lineNumber": 11,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 12,
  },
  Object {
    "arguments": Array [],
    "instruction": "moduleEnd",
    "lineNumber": 14,
  },
]
`;

exports[`bitwiseXor if the generated memory map matches with the snapshot 1`] = `
Map {
  "default1" => Object {
    "byteAddress": 0,
    "default": 0,
    "id": "default1",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 2,
    "type": "int",
    "wordAddress": 0,
    "wordSize": 1,
  },
  "default2" => Object {
    "byteAddress": 4,
    "default": 0,
    "id": "default2",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 3,
    "type": "int",
    "wordAddress": 1,
    "wordSize": 1,
  },
  "in:1" => Object {
    "byteAddress": 8,
    "default": 0,
    "id": "in:1",
    "isInteger": true,
    "isPointer": true,
    "isPointingToInteger": true,
    "isPointingToPointer": false,
    "lineNumber": 4,
    "type": "int*",
    "wordAddress": 2,
    "wordSize": 1,
  },
  "in:2" => Object {
    "byteAddress": 12,
    "default": 4,
    "id": "in:2",
    "isInteger": true,
    "isPointer": true,
    "isPointingToInteger": true,
    "isPointingToPointer": false,
    "lineNumber": 5,
    "type": "int*",
    "wordAddress": 3,
    "wordSize": 1,
  },
  "out" => Object {
    "byteAddress": 16,
    "default": 0,
    "id": "out",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 6,
    "type": "int",
    "wordAddress": 4,
    "wordSize": 1,
  },
}
`;

exports[`bitwiseXor if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    i32.const 16
    i32.const 8
    i32.load
    i32.load
    i32.const 12
    i32.load
    i32.load
    i32.xor
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
