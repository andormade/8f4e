// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`square generator module if the generated ast matches with the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "square",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "counter",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 2,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "rate",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "local",
    "lineNumber": 6,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "_output",
      },
    ],
    "instruction": "local",
    "lineNumber": 7,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "_rate",
      },
    ],
    "instruction": "local",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out",
      },
    ],
    "instruction": "push",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_output",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 11,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 13,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 14,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "rate",
      },
    ],
    "instruction": "push",
    "lineNumber": 16,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_rate",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 17,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 19,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_rate",
      },
    ],
    "instruction": "push",
    "lineNumber": 20,
  },
  Object {
    "arguments": Array [],
    "instruction": "greaterOrEqual",
    "lineNumber": 21,
  },
  Object {
    "arguments": Array [],
    "instruction": "if",
    "lineNumber": 22,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_output",
      },
    ],
    "instruction": "push",
    "lineNumber": 23,
  },
  Object {
    "arguments": Array [],
    "instruction": "equalToZero",
    "lineNumber": 24,
  },
  Object {
    "arguments": Array [],
    "instruction": "if",
    "lineNumber": 26,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "I16_SIGNED_LARGEST_NUMBER",
      },
    ],
    "instruction": "push",
    "lineNumber": 27,
  },
  Object {
    "arguments": Array [],
    "instruction": "else",
    "lineNumber": 28,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "push",
    "lineNumber": 29,
  },
  Object {
    "arguments": Array [],
    "instruction": "ifEnd",
    "lineNumber": 30,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_output",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 31,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "push",
    "lineNumber": 33,
  },
  Object {
    "arguments": Array [],
    "instruction": "else",
    "lineNumber": 35,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 36,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "push",
    "lineNumber": 37,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 38,
  },
  Object {
    "arguments": Array [],
    "instruction": "ifEnd",
    "lineNumber": 39,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 41,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out",
      },
    ],
    "instruction": "push",
    "lineNumber": 43,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_output",
      },
    ],
    "instruction": "push",
    "lineNumber": 44,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 45,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 47,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 48,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 49,
  },
  Object {
    "arguments": Array [],
    "instruction": "moduleEnd",
    "lineNumber": 51,
  },
]
`;

exports[`square generator module if the generated memory map matches with the snapshot 1`] = `
Map {
  "counter" => Object {
    "wordAlignedSize": 1,
    "byteAddress": 0,
    "default": 0,
    "id": "counter",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "type": "int",
    "wordAlignedAddress": 0,
    "wordSize": 4,
  },
  "rate" => Object {
    "wordAlignedSize": 1,
    "byteAddress": 4,
    "default": 0,
    "id": "rate",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "type": "int",
    "wordAlignedAddress": 1,
    "wordSize": 4,
  },
  "out" => Object {
    "wordAlignedSize": 1,
    "byteAddress": 8,
    "default": 0,
    "id": "out",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "type": "int",
    "wordAlignedAddress": 2,
    "wordSize": 4,
  },
}
`;

exports[`square generator module if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32 i32 i32)
    i32.const 8
    i32.load
    local.set 1
    i32.const 0
    i32.load
    local.set 0
    i32.const 4
    i32.load
    local.set 2
    local.get 0
    local.get 2
    i32.ge_s
    if (result i32)  ;; label = @1
      local.get 1
      i32.eqz
      if (result i32)  ;; label = @2
        i32.const 32767
      else
        i32.const 0
      end
      local.set 1
      i32.const 0
    else
      local.get 0
      i32.const 1
      i32.add
    end
    local.set 0
    i32.const 8
    local.get 1
    i32.store
    i32.const 0
    local.get 0
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
