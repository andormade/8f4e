// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`functional tests if the generated ast matches with the snapshot 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "quantizer",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "in",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int*",
    "lineNumber": 2,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "out",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 3,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "allocatedNotes",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 12,
      },
    ],
    "instruction": "int",
    "lineNumber": 4,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "numberOfNotes",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "int",
    "lineNumber": 5,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "notes",
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 12,
      },
      Object {
        "isInteger": true,
        "type": "literal",
        "value": -1,
      },
    ],
    "instruction": "int[]",
    "lineNumber": 6,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "bestMatchingValue",
      },
    ],
    "instruction": "local",
    "lineNumber": 8,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "local",
    "lineNumber": 9,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "_in",
      },
    ],
    "instruction": "local",
    "lineNumber": 10,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "local",
    "lineNumber": 11,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "noteValue",
      },
    ],
    "instruction": "local",
    "lineNumber": 12,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "smallestDifference",
      },
    ],
    "instruction": "local",
    "lineNumber": 13,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "int",
      },
      Object {
        "type": "identifier",
        "value": "notesEndAddressPointer",
      },
    ],
    "instruction": "local",
    "lineNumber": 14,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "*in",
      },
    ],
    "instruction": "push",
    "lineNumber": 16,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_in",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 17,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "numberOfNotes",
      },
    ],
    "instruction": "push",
    "lineNumber": 20,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 4,
      },
    ],
    "instruction": "push",
    "lineNumber": 21,
  },
  Object {
    "arguments": Array [],
    "instruction": "mul",
    "lineNumber": 22,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&notes",
      },
    ],
    "instruction": "push",
    "lineNumber": 23,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 24,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "notesEndAddressPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 25,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "I32_SIGNED_LARGEST_NUMBER",
      },
    ],
    "instruction": "push",
    "lineNumber": 28,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "smallestDifference",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 29,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&notes",
      },
    ],
    "instruction": "push",
    "lineNumber": 32,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 33,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "void",
      },
    ],
    "instruction": "block",
    "lineNumber": 35,
  },
  Object {
    "arguments": Array [],
    "instruction": "loop",
    "lineNumber": 36,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 38,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "notesEndAddressPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 39,
  },
  Object {
    "arguments": Array [],
    "instruction": "greaterOrEqualUnsigned",
    "lineNumber": 40,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "branchIfTrue",
    "lineNumber": 41,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 44,
  },
  Object {
    "arguments": Array [],
    "instruction": "load",
    "lineNumber": 45,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteValue",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 46,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteValue",
      },
    ],
    "instruction": "push",
    "lineNumber": 49,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "_in",
      },
    ],
    "instruction": "push",
    "lineNumber": 50,
  },
  Object {
    "arguments": Array [],
    "instruction": "sub",
    "lineNumber": 51,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 52,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "push",
    "lineNumber": 55,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "push",
    "lineNumber": 56,
  },
  Object {
    "arguments": Array [],
    "instruction": "lessThan",
    "lineNumber": 57,
  },
  Object {
    "arguments": Array [],
    "instruction": "if",
    "lineNumber": 58,
  },
  Object {
    "arguments": Array [
      Object {
        "isInteger": true,
        "type": "literal",
        "value": 0,
      },
    ],
    "instruction": "push",
    "lineNumber": 59,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "push",
    "lineNumber": 60,
  },
  Object {
    "arguments": Array [],
    "instruction": "sub",
    "lineNumber": 61,
  },
  Object {
    "arguments": Array [],
    "instruction": "else",
    "lineNumber": 62,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "push",
    "lineNumber": 63,
  },
  Object {
    "arguments": Array [],
    "instruction": "end",
    "lineNumber": 64,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 65,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "push",
    "lineNumber": 68,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "smallestDifference",
      },
    ],
    "instruction": "push",
    "lineNumber": 69,
  },
  Object {
    "arguments": Array [],
    "instruction": "lessOrEqual",
    "lineNumber": 70,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "void",
      },
    ],
    "instruction": "if",
    "lineNumber": 71,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "difference",
      },
    ],
    "instruction": "push",
    "lineNumber": 75,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "smallestDifference",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 76,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteValue",
      },
    ],
    "instruction": "push",
    "lineNumber": 77,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "bestMatchingValue",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 78,
  },
  Object {
    "arguments": Array [],
    "instruction": "end",
    "lineNumber": 79,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "push",
    "lineNumber": 81,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "WORD_SIZE",
      },
    ],
    "instruction": "push",
    "lineNumber": 82,
  },
  Object {
    "arguments": Array [],
    "instruction": "add",
    "lineNumber": 83,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "noteMemoryPointer",
      },
    ],
    "instruction": "localSet",
    "lineNumber": 84,
  },
  Object {
    "arguments": Array [],
    "instruction": "loopEnd",
    "lineNumber": 85,
  },
  Object {
    "arguments": Array [],
    "instruction": "end",
    "lineNumber": 86,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "&out",
      },
    ],
    "instruction": "push",
    "lineNumber": 89,
  },
  Object {
    "arguments": Array [
      Object {
        "type": "identifier",
        "value": "bestMatchingValue",
      },
    ],
    "instruction": "push",
    "lineNumber": 90,
  },
  Object {
    "arguments": Array [],
    "instruction": "store",
    "lineNumber": 91,
  },
  Object {
    "arguments": Array [],
    "instruction": "moduleEnd",
    "lineNumber": 93,
  },
]
`;

exports[`functional tests if the generated memory map matches with the snapshot 1`] = `
Map {
  "in" => Object {
    "byteAddress": 0,
    "default": 0,
    "id": "in",
    "isInteger": true,
    "isPointer": true,
    "isPointingToInteger": true,
    "isPointingToPointer": false,
    "lineNumber": 2,
    "type": "int*",
    "wordAddress": 0,
    "wordSize": 1,
  },
  "out" => Object {
    "byteAddress": 4,
    "default": 0,
    "id": "out",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 3,
    "type": "int",
    "wordAddress": 1,
    "wordSize": 1,
  },
  "allocatedNotes" => Object {
    "byteAddress": 8,
    "default": 12,
    "id": "allocatedNotes",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 4,
    "type": "int",
    "wordAddress": 2,
    "wordSize": 1,
  },
  "numberOfNotes" => Object {
    "byteAddress": 12,
    "default": 0,
    "id": "numberOfNotes",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 5,
    "type": "int",
    "wordAddress": 3,
    "wordSize": 1,
  },
  "notes" => Object {
    "byteAddress": 16,
    "default": Array [
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
      -1,
    ],
    "id": "notes",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 6,
    "type": "int",
    "wordAddress": 4,
    "wordSize": 12,
  },
  "__loopErrorSignaler" => Object {
    "byteAddress": 64,
    "default": -1,
    "id": "__loopErrorSignaler",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "lineNumber": 1,
    "type": "int",
    "wordAddress": 16,
    "wordSize": 1,
  },
}
`;

exports[`functional tests if the wat code matches with the snapshot 1`] = `
"(module
  (type (;0;) (func))
  (import \\"js\\" \\"memory\\" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32 i32 i32 i32 i32 i32 i32 i32)
    i32.const 0
    i32.load
    i32.load
    local.set 2
    i32.const 12
    i32.load
    i32.const 4
    i32.mul
    i32.const 16
    i32.add
    local.set 6
    i32.const 2147483647
    local.set 5
    i32.const 16
    local.set 3
    block  ;; label = @1
      i32.const 0
      local.set 7
      block  ;; label = @2
        loop  ;; label = @3
          local.get 7
          i32.const 1000
          i32.ge_s
          if  ;; label = @4
            i32.const 64
            i32.const 36
            i32.store
            br 2 (;@2;)
          end
          local.get 7
          i32.const 1
          i32.add
          local.set 7
          local.get 3
          local.get 6
          i32.ge_u
          br_if 1 (;@2;)
          local.get 3
          i32.load
          local.set 4
          local.get 4
          local.get 2
          i32.sub
          local.set 1
          local.get 1
          i32.const 0
          i32.lt_s
          if (result i32)  ;; label = @4
            i32.const 0
            local.get 1
            i32.sub
          else
            local.get 1
          end
          local.set 1
          local.get 1
          local.get 5
          i32.le_s
          if  ;; label = @4
            local.get 1
            local.set 5
            local.get 4
            local.set 0
          end
          local.get 3
          i32.const 4
          i32.add
          local.set 3
          br 0 (;@3;)
        end
      end
    end
    i32.const 4
    local.get 0
    i32.store)
  (export \\"test\\" (func 0)))
"
`;
